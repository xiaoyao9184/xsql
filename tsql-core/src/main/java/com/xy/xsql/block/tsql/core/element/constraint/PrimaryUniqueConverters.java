package com.xy.xsql.block.tsql.core.element.constraint;

import com.xy.xsql.block.meta.BlockMetaBuilder;
import com.xy.xsql.block.model.BlockMeta;
import com.xy.xsql.block.tsql.core.element.index.IndexOptionConverter;
import com.xy.xsql.block.tsql.core.element.index.PartitionConverters;
import com.xy.xsql.tsql.model.elements.Keywords;
import com.xy.xsql.tsql.model.elements.Other;
import com.xy.xsql.tsql.model.datatypes.table.constraint.PrimaryUnique;
import com.xy.xsql.tsql.model.elements.operators.Assignment;

/**
 * Created by xiaoyao9184 on 2017/9/3.
 */
public class PrimaryUniqueConverters {

    public static class Simple {

        // @formatter:off
        public static BlockMeta meta =
                new BlockMetaBuilder<Void,PrimaryUnique>()
                        .sub()
                            .description("primary key/unique")
                            .syntax_required()
                            .czse(PrimaryUnique::isUsePrimaryKey)
                                .sub_keyword(Keywords.PRIMARY)
                                .sub_keyword(Keywords.KEY)
                                .and()
                            .czse_keyword(d -> !d.isUsePrimaryKey(), Keywords.UNIQUE)
                            .and()
                        .sub_keyword(Other.GROUP_START)
                        .sub("column_name")
                            .list()
                            .scope(PrimaryUnique::getColumns)
                            .and()
                        .sub_keyword(Other.GROUP_END)
                        .build();
        // @formatter:on
    }

    public static class DiskBasedTable {
        // @formatter:off
        public static BlockMeta meta =
                new BlockMetaBuilder<Void,PrimaryUnique>()
                        .sub()
                            .description("primary key/unique")
                            .syntax_required()
                            .czse(PrimaryUnique::isUsePrimaryKey)
                                .sub_keyword(Keywords.PRIMARY)
                                .sub_keyword(Keywords.KEY)
                                .and()
                            .czse_keyword(d -> !d.isUsePrimaryKey(), Keywords.UNIQUE)
                            .and()
                        .sub()
                            .description("other thing")
                            .sub()
                                .description("clustered/nonclustered")
                                .optional(d -> d.getUseClustered() == null)
                                .czse_keyword(d -> d.getUseClustered(),Keywords.CLUSTERED)
                                .czse_keyword(d -> !d.getUseClustered(),Keywords.NONCLUSTERED)
                                .and()
                            .sub()
                                .description("column list")
                                .sub_keyword(Other.GROUP_START)
                                .sub()
                                    .list()
                                    .ref(ColumnNameConverters.Order.meta)
                                    .scope(d -> d.getColumns())
                                    .and()
                                .sub_keyword(Other.GROUP_END)
                                .and()
                            .sub()
                                .description("with options")
                                .optional(d -> d.getFillfactor() == null && d.getIndexOptions() == null)
                                .czse(d -> d.getFillfactor() != null)
                                    .sub_keyword(Keywords.WITH)
                                    .sub_keyword(Keywords.FILLFACTOR)
                                    .sub_keyword(Assignment.ASSIGNMENT)
                                    .sub("fillfactor")
                                        .scope(d -> d.getFillfactor())
                                        .and()
                                    .and()
                                .czse(d -> d.getIndexOptions() != null)
                                    .sub_keyword(Keywords.WITH)
                                    .sub_keyword(Other.GROUP_START)
                                    .sub("index_option")
                                        .list()
                                        .ref(IndexOptionConverter.meta)
                                        .scope(d -> d.getIndexOptions())
                                        .and()
                                    .sub_keyword(Other.GROUP_END)
                                    .and()
                                .syntax_context_indentation()
                                .syntax_sub_line()
                                .and()
                            .sub()
                                .description("on")
                                .optional(d -> d.getOn() == null)
                                .sub_keyword(Keywords.ON)
                                .sub()
                                    .ref(PartitionConverters.PartitionColumnFilegroupDefault.meta)
                                    .scope(d -> d.getOn())
                                    .syntax_indentation_right()
                                    .and()
                                .and()
                            .syntax_context_indentation()
                            .syntax_sub_line()
                            .and()
                        .build();
        // @formatter:on
    }

    public static class DiskBasedColumn {
        // @formatter:off
        public static BlockMeta meta =
                new BlockMetaBuilder<Void,PrimaryUnique>()
                        .sub()
                            .description("primary key/unique")
                            .syntax_required()
                            .czse(PrimaryUnique::isUsePrimaryKey)
                                .sub_keyword(Keywords.PRIMARY)
                                .sub_keyword(Keywords.KEY)
                                .and()
                            .czse_keyword(d -> !d.isUsePrimaryKey(), Keywords.UNIQUE)
                            .and()
                        .sub()
                            .description("other thing")
                            .sub()
                                .description("clustered/nonclustered")
                                .optional(d -> d.getUseClustered() == null)
                                .czse_keyword(d -> d.getUseClustered(),Keywords.CLUSTERED)
                                .czse_keyword(d -> !d.getUseClustered(),Keywords.NONCLUSTERED)
                                .and()
                            .sub()
                                .description("with options")
                                .optional(d -> d.getFillfactor() == null && d.getIndexOptions() == null)
                                .czse(d -> d.getFillfactor() != null)
                                    .sub_keyword(Keywords.WITH)
                                    .sub_keyword(Keywords.FILLFACTOR)
                                    .sub_keyword(Assignment.ASSIGNMENT)
                                    .sub("fillfactor")
                                        .scope(d -> d.getFillfactor())
                                        .and()
                                    .and()
                                .czse(d -> d.getIndexOptions() != null)
                                    .sub_keyword(Keywords.WITH)
                                    .sub_keyword(Other.GROUP_START)
                                    .sub("index_option")
                                        .list()
                                        //.ref()
                                        .scope(d -> d.getIndexOptions())
                                        .and()
                                    .sub_keyword(Other.GROUP_END)
                                    .and()
                                .syntax_context_indentation()
                                .syntax_sub_line()
                                .and()
                            .sub()
                                .description("on")
                                .optional(d -> d.getOn() == null)
                                .sub_keyword(Keywords.ON)
                                .sub()
                                    .description("partition")
                                    .ref(PartitionConverters.PartitionColumnFilegroupDefault.meta)
                                    .scope(d -> d.getOn())
                                    .syntax_indentation_right()
                                    .and()
                                .and()
                            .syntax_sub_line()
                            .syntax_context_indentation()
                            .and()
                        .build();
        // @formatter:on
    }

    public static class MemoryOptimizedTable {
        // @formatter:off
        public static BlockMeta meta =
                new BlockMetaBuilder<Void,PrimaryUnique>()
                        .sub()
                            .description("primary key/unique")
                            .syntax_required()
                            .czse(PrimaryUnique::isUsePrimaryKey)
                                .sub_keyword(Keywords.PRIMARY)
                                .sub_keyword(Keywords.KEY)
                                .and()
                            .czse_keyword(d -> !d.isUsePrimaryKey(), Keywords.UNIQUE)
                            .and()
                        .sub()
                            .description("other thing")
                            .sub()
                                .czse(d -> !d.isUseHash())
                                    .description("nonclustered column")
                                    .sub_keyword(Keywords.NONCLUSTERED)
                                    .sub_keyword(Other.GROUP_START)
                                    .sub()
                                        .list()
                                        .ref(ColumnNameConverters.Order.meta)
                                        .scope(d -> d.getColumns())
                                        .and()
                                    .sub_keyword(Other.GROUP_END)
                                    .and()
                                .czse(d -> d.isUseHash())
                                    .description("nonclustered hash column")
                                    .sub_keyword(Keywords.NONCLUSTERED)
                                    .sub_keyword(Keywords.Key.HASH)
                                    .sub_keyword(Other.GROUP_START)
                                    .sub()
                                        .list()
                                        .ref(ColumnNameConverters.Base.meta)
                                        .scope(d -> d.getColumns())
                                        .and()
                                    .sub_keyword(Other.GROUP_END)
                                    .sub_keyword(Keywords.WITH)
                                    .sub_keyword(Other.GROUP_START)
                                    .sub_keyword(Keywords.Key.BUCKET_COUNT)
                                    .sub_keyword(Assignment.ASSIGNMENT)
                                    .sub("bucket_count")
                                        .scope(d -> d.getBucketCount())
                                        .and()
                                    .sub_keyword(Other.GROUP_END)
                                    .and()
                                .syntax_sub_line()
                                .and()
                            .syntax_line()
                            .syntax_indentation_right()
                            .syntax_required()
                            .syntax_context_indentation()
                            .and()
                        .build();
        // @formatter:on

    }

    public static class MemoryOptimizedColumn {
        // @formatter:off
        public static BlockMeta meta =
                new BlockMetaBuilder<Void,PrimaryUnique>()
                        .sub()
                            .description("primary key/unique")
                            .syntax_required()
                            .czse(PrimaryUnique::isUsePrimaryKey)
                                .sub_keyword(Keywords.PRIMARY)
                                .sub_keyword(Keywords.KEY)
                                .and()
                            .czse_keyword(d -> !d.isUsePrimaryKey(), Keywords.UNIQUE)
                            .and()
                        .sub()
                            .sub()
                                .description("nonclustered/nonclustered hash")
                                .czse(d -> !d.isUseHash())
                                    .keyword(Keywords.NONCLUSTERED)
                                    .and()
                                .czse(d -> d.isUseHash())
                                    .sub_keyword(Keywords.NONCLUSTERED)
                                    .sub_keyword(Keywords.Key.HASH)
                                    .sub_keyword(Keywords.WITH)
                                    .sub_keyword(Other.GROUP_START)
                                    .sub_keyword(Keywords.Key.BUCKET_COUNT)
                                    .sub_keyword(Assignment.ASSIGNMENT)
                                    .sub("bucket_count")
                                        .scope(d -> d.getBucketCount())
                                        .and()
                                    .sub_keyword(Other.GROUP_END)
                                    .and()
                                .syntax_sub_line()
                                .and()
                            .syntax_line()
                            .syntax_indentation_right()
                            .syntax_required()
                            .syntax_context_indentation()
                            .and()
                        .build();
        // @formatter:on
    }
}
