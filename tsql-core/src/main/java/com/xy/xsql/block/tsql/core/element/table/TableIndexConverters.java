package com.xy.xsql.block.tsql.core.element.table;

import com.xy.xsql.block.meta.BlockMetaBuilder;
import com.xy.xsql.block.model.BlockMeta;
import com.xy.xsql.block.tsql.core.element.constraint.ColumnNameConverters;
import com.xy.xsql.block.tsql.core.element.index.PartitionConverters;
import com.xy.xsql.tsql.model.elements.Keywords;
import com.xy.xsql.tsql.model.elements.Other;
import com.xy.xsql.tsql.model.datatypes.table.index.IndexOption;
import com.xy.xsql.tsql.model.datatypes.table.table.TableIndex;
import com.xy.xsql.tsql.model.elements.operators.Assignment;

/**
 * Created by xiaoyao9184 on 2017/9/3.
 */
public class TableIndexConverters {

    public static class DiskBased {
        // @formatter:off
        public static BlockMeta meta =
                new BlockMetaBuilder<Void,TableIndex>()
                        .overall("table_index")
                        .sub()
                            .description("")
                            .czse(d -> !d.isUseColumnStore() && d.getColumnNameList() != null)
                                .sub_keyword(Keywords.INDEX)
                                .sub("index_name")
                                    .scope(d -> d.getIndexName())
                                    .and()
                                .sub()
                                    .description("clustered/nonclustered")
                                    .optional(d -> d.getUseClustered() == null)
                                    .czse_keyword(d -> d.getUseClustered(),Keywords.CLUSTERED)
                                    .czse_keyword(d -> !d.getUseClustered(),Keywords.NONCLUSTERED)
                                    .and()
                                .sub()
                                    .description("column name list")
                                    .sub_keyword(Other.GROUP_START)
                                    .sub("column_name")
                                        .description("column name list")
                                        .list()
                                        .ref(ColumnNameConverters.Order.meta)
                                        .scope(d -> d.getColumnNameList())
                                        .syntax_reference_remove()
                                        .and()
                                    .sub_keyword(Other.GROUP_END)
                                    .syntax_line()
                                    .syntax_indentation_right()
                                    .and()
                                .and()
                            .czse(d -> d.isUseColumnStore() && d.getColumnNameList() == null)
                                .sub_keyword(Keywords.INDEX)
                                .sub("index_name")
                                    .scope(d -> d.getIndexName())
                                    .and()
                                .sub_keyword(Keywords.CLUSTERED)
                                .sub_keyword(Keywords.Key.COLUMNSTORE)
                                .and()
                            .czse(d -> d.isUseColumnStore() && d.getColumnNameList() != null)
                                .sub_keyword(Keywords.INDEX)
                                .sub("index_name")
                                    .scope(d -> d.getIndexName())
                                    .and()
                                .sub()
                                    .optional(d -> d.getUseNonClustered() == null || !d.getUseNonClustered())
                                    .keyword(Keywords.NONCLUSTERED)
                                    .and()
                                .sub_keyword(Keywords.CLUSTERED)
                                .sub_keyword(Other.GROUP_START)
                                .sub("column_name")
                                    .list()
                                    .ref(ColumnNameConverters.Base.meta)
                                    .scope(d -> d.getColumnNameList())
                                    .syntax_reference_remove()
                                    .and()
                                .sub_keyword(Other.GROUP_END)
                                .and()
                            .syntax_sub_line()
                            .and()
                        .sub()
                            .description("with option list")
                            .optional(d -> d.getIndexOptionList() == null)
                            .sub_keyword(Keywords.WITH)
                            .sub_keyword(Other.GROUP_START)
                            .sub("index_option")
                                .list()
//                                .ref()
                                .scope(d -> d.getIndexOptionList())
                                .and()
                            .sub_keyword(Other.GROUP_END)
                            .and()
                        .sub()
                            .description("on partition")
                            .sub_keyword(Keywords.ON)
                            .sub()
                                .description("partition")
                                .ref(PartitionConverters.PartitionColumnFilegroupDefault.meta)
                                .scope(d -> d.getPartition())
                                .syntax_indentation_right()
                                .and()
                            .and()
                        .sub()
                            .description("filestream on partition")
                            .sub_keyword(Keywords.ON)
                            .sub()
                                .description("partition")
                                .ref(PartitionConverters.FileStreamGroupNull.meta)
                                .scope(d -> d.getFileStreamPartition())
                                .and()
                            .and()
                        .syntax_required()
                        .syntax_context_indentation()
                        .syntax_sub_line()
                        .build();
        // @formatter:on

    }

    public static class MemoryOptimized {

        // @formatter:off
        public static BlockMeta meta =
                new BlockMetaBuilder<Void,TableIndex>()
                        .overall("table_index")
                        .sub_keyword(Keywords.INDEX)
                        .sub("index_name")
                            .scope(d -> d.getIndexName())
                            .and()
                        .sub()
                            .description("other thing")
                            .czse(d -> d.isUseHash())
                                .sub()
                                    .description("nonclustered")
                                    .optional(d -> d.getUseNonClustered() == null)
                                    .keyword(Keywords.NONCLUSTERED)
                                    .and()
                                .sub_keyword(Keywords.Key.HASH)
                                .sub()
                                    .description("column name list")
                                    .sub_keyword(Other.GROUP_START)
                                    .sub("column_name")
                                        .description("column name list")
                                        .list()
                                        .ref(ColumnNameConverters.Base.meta)
                                        .scope(d -> d.getColumnNameList())
                                        .syntax_reference_remove()
                                        .and()
                                    .sub_keyword(Other.GROUP_END)
                                    .and()
                                .sub_keyword(Keywords.WITH)
                                .sub_keyword(Other.GROUP_START)
                                .sub_keyword(Keywords.Key.BUCKET_COUNT)
                                .sub_keyword(Assignment.ASSIGNMENT)
                                .sub("bucket_count")
                                    .scope(d -> d.getBucketCount())
                                    .and()
                                .sub_keyword(Other.GROUP_END)
                                .and()
                            .czse(d -> !d.isUseColumnStore())
                                .sub()
                                    .description("nonclustered")
                                    .optional(d -> d.getUseNonClustered() == null)
                                    .keyword(Keywords.NONCLUSTERED)
                                    .and()
                                .sub()
                                    .description("column name list")
                                    .sub_keyword(Other.GROUP_START)
                                    .sub("column_name")
                                        .description("column name list")
                                        .list()
                                        .ref(ColumnNameConverters.Order.meta)
                                        .scope(d -> d.getColumnNameList())
                                        .syntax_reference_remove()
                                        .and()
                                    .sub_keyword(Other.GROUP_END)
                                    .and()
                                .sub()
                                    .optional(d -> d.getPartition() == null)
                                    .sub_keyword(Keywords.ON)
                                    .sub()
                                        .ref(PartitionConverters.FilegroupDefaultKey.meta)
                                        .scope(d -> d.getPartition())
                                        .and()
                                    .syntax_line()
                                    .syntax_indentation_right()
                                    .and()
                                .and()
                            .czse(d -> d.isUseColumnStore())
                                .sub_keyword(Keywords.CLUSTERED)
                                .sub_keyword(Keywords.Key.COLUMNSTORE)
                                .sub()
                                    .description("with")
                                    .optional(d -> d.getIndexOptionList() == null)
                                    .sub_keyword(Keywords.WITH)
                                    .sub_keyword(Other.GROUP_START)
                                    .sub_keyword(IndexOption.Type.COMPRESSION_DELAY)
                                    .sub_keyword(Assignment.ASSIGNMENT)
                                    .sub()
                                        .czse(d -> d.getDelay() == null,"0")
                                            .scope(d -> 0)
                                            .and()
                                        .czse(d -> d.getDelay() != null,"delay [Minutes]")
                                            .sub()
                                                .scope(d -> d.getDelay())
                                                .and()
                                            .sub()
                                                .scope(d -> "Minutes")
                                                .and()
                                            .and()
                                        .and()
                                    .sub_keyword(Other.GROUP_END)
                                    .and()
                                .sub()
                                    .optional(d -> d.getPartition() == null)
                                    .sub_keyword(Keywords.ON)
                                    .sub()
                                        .ref(PartitionConverters.FilegroupDefaultKey.meta)
                                        .scope(d -> d.getPartition())
                                        .and()
                                    .syntax_line()
                                    .syntax_indentation_right()
                                    .and()
                                .and()
                            .syntax_line()
                            .syntax_required()
                            .syntax_context_indentation()
                            .syntax_sub_line()
                            .and()
                        .build();
        // @formatter:on
    }

}
