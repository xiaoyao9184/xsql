package com.xy.xsql.block.tsql.core.element.column;

import com.xy.xsql.block.meta.BlockMetaBuilder;
import com.xy.xsql.block.model.BlockMeta;
import com.xy.xsql.block.tsql.core.datatype.DataTypeConverters;
import com.xy.xsql.tsql.model.elements.Keywords;
import com.xy.xsql.tsql.model.datatypes.table.ColumnName;
import com.xy.xsql.tsql.model.elements.Other;
import com.xy.xsql.tsql.model.datatypes.table.column.ColumnDefinition;
import com.xy.xsql.tsql.model.elements.operators.Assignment;

/**
 * Created by xiaoyao9184 on 2017/9/3.
 */
public class ColumnDefinitionConverters {

    public static class DiskBased {
        // @formatter:off
        public static BlockMeta meta =
                new BlockMetaBuilder<Void,ColumnDefinition>()
                        .overall("column_definition")
                        .sub("column_name")
                            .scope(ColumnName::getName)
                            .and()
                        .sub("data_type")
                            .ref(DataTypeConverters.Full.meta)
                            .scope(d -> d.getDataType())
                            .and()
                        .sub()
                            .description("other adv thing")
                            .sub()
                                .description("filestream")
                                .optional(d -> !d.isUseFilestream())
                                .keyword(Keywords.Key.FILESTREAM)
                                .and()
                            .sub()
                                .description("collate")
                                .optional(d -> d.getCollationName() == null)
                                .sub_keyword(Keywords.Key.COLLATE)
                                .sub("collation_name")
                                    .scope(d -> d.getCollationName())
                                    .and()
                                .and()
                            .sub()
                                .description("sparse")
                                .optional(d -> !d.isUseSparse())
                                .keyword(Keywords.Key.SPARSE)
                                .and()
                            .sub()
                                .description("masked")
                                .optional(d -> d.getMaskFunction() == null)
                                .sub_keyword(Keywords.Key.MASKED)
                                .sub_keyword(Keywords.WITH)
                                .sub_keyword(Other.GROUP_START)
                                .sub_keyword(Keywords.FUNCTION)
                                .sub_keyword(Assignment.ASSIGNMENT)
                                .sub("'mask_function'")
                                    .scope(d -> d.getMaskFunction())
                                    .and()
                                .sub_keyword(Other.GROUP_END)
                                .and()
                            .sub()
                                .description("constraint")
                                .optional(d -> d.getConstraintName() == null)
                                .sub_keyword(Keywords.CONSTRAINT)
                                .sub("constraint_name")
                                    .scope(d -> d.getConstraintName())
                                    .and()
                                .sub()
                                    .description("default constant")
                                    .sub_keyword(Keywords.DEFAULT)
                                    .sub("constant_expression")
                                        .scope(d -> d.getConstantExpression())
                                        .and()
                                    .and()
                                .and()
                            .sub()
                                .description("inentity")
                                .optional(d -> d.getSeed() == null || d.getIncrement() == null)
                                .sub_keyword(Keywords.IDENTITY)
                                .sub_keyword(Other.GROUP_START)
                                .sub("seed")
                                    .scope(d -> d.getSeed())
                                    .and()
                                .sub_keyword(Other.DELIMITER)
                                .sub("increment")
                                    .scope(d -> d.getIncrement())
                                    .and()
                                .sub_keyword(Other.GROUP_END)
                                .and()
                            .sub()
                                .description("not for reflication")
                                .optional(d -> !d.isUseNotForReplication())
                                .sub_keyword(Keywords.NOT)
                                .sub_keyword(Keywords.FOR)
                                .sub_keyword(Keywords.REPLICATION)
                                .and()
                            .sub()
                                .description("generated always")
                                .optional(d -> !d.isUseGeneratedAlwaysStart() || !d.isUseGeneratedAlwaysEnd())
                                .sub_keyword(Keywords.Key.GENERATED)
                                .sub_keyword(Keywords.Key.ALWAYS)
                                .sub_keyword(Keywords.AS)
                                .sub_keyword(Keywords.Key.ROW)
                                .sub()
                                    .description("start/end")
                                    .syntax_required()
                                    .czse_keyword(d -> d.isUseGeneratedAlwaysStart(),Keywords.Key.START)
                                    .czse_keyword(d -> !d.isUseGeneratedAlwaysStart(),Keywords.Key.END)
                                    .and()
                                .sub()
                                    .description("hidden")
                                    .optional(d -> !d.isUseHidden())
                                    .keyword(Keywords.Key.HIDDEN)
                                    .and()
                                .and()
                            .sub()
                                .description("null/not null")
                                .optional(d -> !d.isUseNotNull() && !d.isUseNull())
                                .czse_keyword(d -> d.isUseNull(),Keywords.NULL)
                                .czse(d -> d.isUseNotNull())
                                    .sub_keyword(Keywords.NOT)
                                    .sub_keyword(Keywords.NULL)
                                    .and()
                                .and()
                            .sub()
                                .description("rowguidcol")
                                .optional(d -> !d.isUseRowGuidCol())
                                .keyword(Keywords.ROWGUIDCOL)
                                .and()
                            .sub()
                                .description("encrypted")
                                .optional(d -> d.getColumnEncryptionKey() == null)
                                .sub_keyword(Keywords.Key.ENCRYPTED)
                                .sub_keyword(Keywords.WITH)
                                .sub_keyword(Other.GROUP_START)
                                .sub()
                                    .sub()
                                        .description("encrypted key")
                                        .sub_keyword(Keywords.Key.COLUMN_ENCRYPTION_KEY)
                                        .sub_keyword(Assignment.ASSIGNMENT)
                                        .sub("key_name")
                                            .scope(d -> d.getColumnEncryptionKey())
                                            .and()
                                        .sub_keyword(Other.DELIMITER)
                                        .and()
                                    .sub()
                                        .description("encrypted type")
                                        .syntax_required()
                                        .sub_keyword(Keywords.Key.ENCRYPTION_TYPE)
                                        .sub_keyword(Assignment.ASSIGNMENT)
                                        .sub()
                                            .czse_keyword(d -> !d.isRandomizedEncryptionType(),Keywords.Key.DETERMINISTIC)
                                            .czse_keyword(d -> d.isRandomizedEncryptionType(),Keywords.Key.RANDOMIZED)
                                            .and()
                                        .sub_keyword(Other.DELIMITER)
                                        .and()
                                    .sub()
                                        .description("encrypted algorithm")
                                        .sub_keyword(Keywords.Key.ALGORITHM)
                                        .sub_keyword(Assignment.ASSIGNMENT)
                                        .sub("'AEAD_AES_256_CBC_HMAC_SHA_256'")
                                            .scope(d -> d.getAlgorithm())
                                            .and()
                                        .and()
                                    .syntax_context_indentation()
                                    .syntax_sub_line()
        //                            .syntax_indentation_right()
                                    .and()
                                .sub_keyword(Other.GROUP_END)
                                .and()
                            .sub("column_constraint")
                                .optional(d -> d.getColumnConstraint() == null)
                                .list()
                                .ref(ColumnConstraintConverters.DiskBased.meta)
                                .scope(d -> d.getColumnConstraint())
                                .and()
                            .sub("column_index")
                                .optional(d -> d.getColumnIndex() == null)
                                .ref(ColumnIndexConverters.DiskBased.meta)
                                .scope(d -> d.getColumnIndex())
                                .and()
                            .syntax_context_indentation()
                            .syntax_sub_line()
                            .sub_format_line()
                            .and()
                        .build();
        // @formatter:on
    }

    public static class MemoryOptimized {
        // @formatter:off
        public static BlockMeta meta =
                new BlockMetaBuilder<Void,ColumnDefinition>()
                        .overall("column_definition")
                        .sub("column_name")
                            .scope(ColumnName::getName)
                            .and()
                        .sub("data_type")
                            .ref(DataTypeConverters.Base.meta)
                            .scope(d -> d.getDataType())
                            .and()
                        .sub()
                            .description("other adv thing")
                            .sub()
                                .description("collate")
                                .optional(d -> d.getCollationName() == null)
                                .sub_keyword(Keywords.Key.COLLATE)
                                .sub("collation_name")
                                    .scope(d -> d.getCollationName())
                                    .and()
                                .and()
                            .sub()
                                .description("generated always")
                                .optional(d -> !d.isUseGeneratedAlwaysStart() || !d.isUseGeneratedAlwaysEnd())
                                .sub_keyword(Keywords.Key.GENERATED)
                                .sub_keyword(Keywords.Key.ALWAYS)
                                .sub_keyword(Keywords.AS)
                                .sub_keyword(Keywords.Key.ROW)
                                .sub()
                                    .description("start/end")
                                    .syntax_required()
                                    .czse_keyword(d -> d.isUseGeneratedAlwaysStart(),Keywords.Key.START)
                                    .czse_keyword(d -> !d.isUseGeneratedAlwaysStart(),Keywords.Key.END)
                                    .and()
                                .sub()
                                    .description("hidden")
                                    .optional(d -> !d.isUseHidden())
                                    .keyword(Keywords.Key.HIDDEN)
                                    .and()
                                .and()
                            .sub()
                                .description("null/not null")
                                .optional(d -> !d.isUseNotNull() && !d.isUseNull())
                                .czse_keyword(d -> d.isUseNull(),Keywords.NULL)
                                .czse(d -> d.isUseNotNull())
                                    .sub_keyword(Keywords.NOT)
                                    .sub_keyword(Keywords.NULL)
                                    .and()
                                .and()
                            .sub()
                                .description("constraint default/identity")
                                .optional(d -> d.getConstraintName() == null &&
                                        d.getConstantExpression() == null)
                                .czse(d -> d.getConstantExpression() != null)
                                    .sub()
                                        .description("constraint name")
                                        .optional(d -> d.getConstraintName() == null)
                                        .sub_keyword(Keywords.CONSTRAINT)
                                        .sub("constraint_name")
                                            .scope(d -> d.getConstraintName())
                                            .and()
                                        .and()
                                    .sub()
                                        .description("constraint default")
                                        .sub_keyword(Keywords.DEFAULT)
                                        .sub("memory_optimized_constant_expression")
                                            .scope(d -> d.getConstantExpression())
                                            .and()
                                        .and()
                                    .and()
                                .czse(d -> d.getConstantExpression() == null)
                                    .sub_keyword(Keywords.IDENTITY)
                                    .sub_keyword(Other.GROUP_START)
                                    .sub("1")
                                        .scope(d -> 1)
                                        .and()
                                    .sub_keyword(Other.DELIMITER)
                                    .sub("1")
                                        .scope(d -> 1)
                                        .and()
                                    .sub_keyword(Other.GROUP_END)
                                    .and()
                                .syntax_context_indentation()
                                .syntax_sub_line()
                                .and()
                            .sub("column_constraint")
                                .optional(d -> d.getColumnConstraint() == null)
                                .ref(ColumnConstraintConverters.MemoryOptimized.meta)
                                .scope(d -> d.getColumnConstraint())
                                .and()
                            .sub("column_index")
                                .optional(d -> d.getColumnIndex() == null)
                                .ref(ColumnIndexConverters.MemoryOptimized.meta)
                                .scope(d -> d.getColumnIndex())
                                .and()
                            .syntax_context_indentation()
                            .syntax_sub_line()
                            .sub_format_line()
                            .and()
                        .build();
        // @formatter:on
    }

}
