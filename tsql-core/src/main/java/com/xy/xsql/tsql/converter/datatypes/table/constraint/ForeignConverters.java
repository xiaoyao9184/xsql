package com.xy.xsql.tsql.converter.datatypes.table.constraint;

import com.xy.xsql.block.meta.BlockMetaBuilder;
import com.xy.xsql.block.model.BlockMeta;
import com.xy.xsql.tsql.model.elements.Keywords;
import com.xy.xsql.tsql.model.elements.Other;
import com.xy.xsql.tsql.model.datatypes.table.constraint.Foreign;

import static com.xy.xsql.tsql.converter.EnumConverterUtil.getSyntaxString;

/**
 * Created by xiaoyao9184 on 2017/9/3.
 */
public class ForeignConverters {

    public static class DiskBasedTable {
        // @formatter:off
        public static BlockMeta meta =
                new BlockMetaBuilder<Void,Foreign>()
                        .sub_keyword(Keywords.FOREIGN)
                        .sub_keyword(Keywords.KEY)
                        .sub()
                            .description("other thing")
                            .sub()
                                .description("column list")
                                .sub_keyword(Other.GROUP_START)
                                .sub()
                                    .list()
                                    .ref(ColumnNameConverters.Base.meta)
                                    .scope(d -> d.getColumns())
                                    .and()
                                .sub_keyword(Other.GROUP_END)
                                .and()
                            .sub()
                                .description("references")
                                .sub_keyword(Keywords.REFERENCES)
                                .sub("referenced_table_name")
                                    .scope(d -> d.getReferencedTableName())
                                    .and()
                                .sub()
                                    .description("ref column list")
                                    .optional(d -> d.getRefColumns() == null)
                                    .sub_keyword(Other.GROUP_START)
                                    .sub("ref_column")
                                        .list()
                                        .ref(ColumnNameConverters.Base.meta)
                                        .scope(d -> d.getRefColumns())
                                        .and()
                                    .sub_keyword(Other.GROUP_END)
                                    .and()
                                .and()
                            .sub()
                                .description("on delete")
                                .optional(d -> d.getOnDelete() == null)
                                .sub_keyword(Keywords.ON)
                                .sub_keyword(Keywords.DELETE)
                                .sub(getSyntaxString(Foreign.OnType.class))
                                    .optional(d -> d.getOnDelete() == null)
                                    .scope(d -> d.getOnDelete().toString())
                                    .and()
                                .and()
                            .sub()
                                .description("on update")
                                .optional(d -> d.getOnUpdate() == null)
                                .sub_keyword(Keywords.ON)
                                .sub_keyword(Keywords.DELETE)
                                .sub(getSyntaxString(Foreign.OnType.class))
                                    .optional(d -> d.getOnUpdate() == null)
                                    .scope(d -> d.getOnUpdate().toString())
                                    .and()
                                .and()
                            .sub()
                                .description("not for replication")
                                .optional(d -> !d.isUseNotForReplication())
                                .sub_keyword(Keywords.NOT)
                                .sub_keyword(Keywords.FOR)
                                .sub_keyword(Keywords.REPLICATION)
                                .and()
                            .syntax_context_indentation()
                            .syntax_sub_line()
                            .and()
                        .build();
        // @formatter:on
    }

    public static class DiskBasedColumn {
        // @formatter:off
        public static BlockMeta meta =
                new BlockMetaBuilder<Void,Foreign>()
                        .sub()
                            .optional(d -> !d.isUseForeignKey())
                            .sub_keyword(Keywords.FOREIGN)
                            .sub_keyword(Keywords.KEY)
                            .and()
                        .sub()
                            .description("other thing")
                            .sub()
                                .description("references")
                                .sub_keyword(Keywords.REFERENCES)
                                .sub()
                                    .optional(d -> d.getSchemaName() == null)
                                    .sub("schema_name")
                                        .scope(d -> d.getSchemaName ())
                                        .and()
                                    .sub_keyword(Other.POINT)
                                    .and()
                                .sub("referenced_table_name")
                                    .scope(d -> d.getReferencedTableName())
                                    .and()
                                .sub()
                                    .description("ref column")
                                    .optional(d -> d.getRefColumns() == null)
                                    .sub_keyword(Other.GROUP_START)
                                    .sub("ref_column")
                                        .scope(d -> d.getRefColumns().get(0))
                                        .and()
                                    .sub_keyword(Other.GROUP_END)
                                    .and()
                                .and()
                            .sub()
                                .description("on delete")
                                .optional(d -> d.getOnDelete() == null)
                                .sub_keyword(Keywords.ON)
                                .sub_keyword(Keywords.DELETE)
                                .sub(getSyntaxString(Foreign.OnType.class))
                                    .optional(d -> d.getOnDelete() == null)
                                    .scope(d -> d.getOnDelete().toString())
                                    .and()
                                .and()
                            .sub()
                                .description("on update")
                                .optional(d -> d.getOnUpdate() == null)
                                .sub_keyword(Keywords.ON)
                                .sub_keyword(Keywords.DELETE)
                                .sub(getSyntaxString(Foreign.OnType.class))
                                    .optional(d -> d.getOnUpdate() == null)
                                    .scope(d -> d.getOnUpdate().toString())
                                    .and()
                                .and()
                            .sub()
                                .description("not for replication")
                                .optional(d -> !d.isUseNotForReplication())
                                .sub_keyword(Keywords.NOT)
                                .sub_keyword(Keywords.FOR)
                                .sub_keyword(Keywords.REPLICATION)
                                .and()
                            .syntax_context_indentation()
                            .syntax_sub_line()
                            .and()
                        .build();
        // @formatter:on
    }

    public static class MemoryOptimizedTable {
        // @formatter:off
        public static BlockMeta meta =
                new BlockMetaBuilder<Void,Foreign>()
                        .sub_keyword(Keywords.FOREIGN)
                        .sub_keyword(Keywords.KEY)
                        .sub()
                            .description("other thing")
                            .sub()
                                .description("column list")
                                .sub_keyword(Other.GROUP_START)
                                .sub()
                                    .list()
                                    .ref(ColumnNameConverters.Base.meta)
                                    .scope(d -> d.getColumns())
                                    .and()
                                .sub_keyword(Other.GROUP_END)
                                .and()
                            .sub()
                                .description("references")
                                .sub_keyword(Keywords.REFERENCES)
                                .sub("referenced_table_name")
                                    .scope(d -> d.getReferencedTableName())
                                    .and()
                                .sub()
                                    .description("ref column list")
                                    .optional(d -> d.getRefColumns() == null)
                                    .sub_keyword(Other.GROUP_START)
                                    .sub("ref_column")
                                        .list()
                                        .ref(ColumnNameConverters.Base.meta)
                                        .scope(d -> d.getRefColumns())
                                        .and()
                                    .sub_keyword(Other.GROUP_END)
                                    .and()
                                .and()
                            .syntax_line()
                            .syntax_indentation_right()
                            .syntax_sub_line()
                            .and()
                        .build();
        // @formatter:on
    }

    public static class MemoryOptimizedColumn {
        // @formatter:off
        public static BlockMeta meta =
                new BlockMetaBuilder<Void,Foreign>()
                        .sub()
                            .optional(d -> !d.isUseForeignKey())
                            .sub_keyword(Keywords.FOREIGN)
                            .sub_keyword(Keywords.KEY)
                            .and()
                        .sub()
                            .description("references")
                            .sub_keyword(Keywords.REFERENCES)
                            .sub()
                                .optional(d -> d.getSchemaName() == null)
                                .sub("schema_name")
                                    .scope(d -> d.getSchemaName ())
                                    .and()
                                .sub_keyword(Other.POINT)
                                .and()
                            .sub("referenced_table_name")
                                .scope(d -> d.getReferencedTableName())
                                .and()
                            .sub()
                                .description("ref column")
                                .optional(d -> d.getRefColumns() == null)
                                .sub_keyword(Other.GROUP_START)
                                .sub("ref_column")
                                    .scope(d -> d.getRefColumns().get(0))
                                    .and()
                                .sub_keyword(Other.GROUP_END)
                                .and()
                            .syntax_line()
                            .syntax_indentation_right()
                            .and()
                        .build();
        // @formatter:on
    }

}
